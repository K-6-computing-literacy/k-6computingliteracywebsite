---
title: "Activity 13: Conditional Color Coding"
subtitle: "Complete the Blue-Bot maps but make sure to follow the color code."
grades: 2nd, 3rd
time_required: "30 minutes"
categories: ["Grade: Grade: 2", "Grade: 3", "Time: 30 Minutes"]
toc: true
page-layout: full
---

## Description

In this activity, students will use robots to navigate maps filled with conditional statements that require them to adhere to specific constraints. Each student will receive a color-coded reference sheet outlining the conditions that must be followed when standing on a particular color. As students progress through the obstacles, they will gradually encounter more complex challenges incorporating additional conditional statements. This structured approach fosters critical thinking and problem-solving skills while enhancing their understanding of conditional logic in programming.

## Time Required

- **Time Required**: 30 minutes

## Materials Required

- Programable and driveable robot
- IPAD
- Map (an example is shown below)
- [Condtional Color Sheet](./ColorSheet.pdf)
- Colored Flashcards

## Picture of the Map

![Map Picture](/images/ExampleMap.png)

## Steps to Conduct the Activity

### Set-Up

- Each map should have at least two students, with each assigned three columns for their obstacle course. A fifth colored flashcard should mark the end goal in the top row.
- Ensure there is one robot for every three columns. If there are more students than available maps or robots, pairing them is the best option.
    - When pairing students, ensure they take equal turns using the device.
- Design the course using flashcards so that students encounter at least five conditions regardless of their chosen path to the goal.

### Difficulty Breakdown

#### Introduction
- Introduce the color-coded sheet, which specifies conditions requiring either the use or restriction of certain code blocks.
- Since some conditions involve turning at specific angles, ensure students understand the difference between 45-degree and 90-degree turns.
- Clearly state each color used and the required action when landing on it.

#### Beginner
- Encourage students to complete the course independently and assist those who are confused or struggling with the task.
- If students are hesitant to help, involve a nearby teacher to better manage the situation.
- Once a student achieves their goal, have them reposition the marked goal within the top row of their three columns.
- üîç *Focus Skills*: Object interaction, movement basics, problem-solving

#### Intermediate
- Encourage students to complete the course independently and assist those who are confused or struggling with the task.
- If students are hesitant to help, involve a nearby teacher to better manage the situation.
- Once a student achieves their goal, have them reposition the marked goal within the top row of their three columns.
- After meeting their marked goals twice, allow them to modify the flashcards and provide guidance if their courses are not conditionally possible. 
- Once modifying their courses, ask them to keep track of how many times they meet their goal.
- üîç *Focus Skills*: Creativity, problem-solving, conditional logic

## Discussion & Reflection

After the activity has been completed, gather the class for a quick debrief. We can ask:

- Which conditional color did you have the hardest time passing and why?
- Were there any colors you found too easy to pass by?
- How many times were you able to finish your obstacle courses?
- Additionally, for those who kept count, how many times were you able to complete your obstacles?

## Wrap-Up

By programming robots to navigate maps with specific constraints, students develop an understanding of how conditions affect movement and decision-making. The activity reinforces computational thinking, logical reasoning, and teamwork while encouraging students to experiment with different coding sequences.

## Learning Outcomes

By the end of this activity, students should be able to:

- Understand basic coding principles.
- Use conditional statements to create decision-making processes in block coding.
- Enhance their computational thinking skills by breaking down a problem into smaller, manageable conditions and actions.
- Test their block code in a practical setup and debug any issues that arise to ensure the robot navigates correctly.