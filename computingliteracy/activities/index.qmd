---
title: "Activity 22: Dash’s Adventure Series – Basketball Challenge & Castle Siege"
subtitle: "Use code to guide Dash through two dynamic, themed challenges!"
grades: 1st–6th
time_required: "40 minutes"
categories: ["Grade: 1", "Grade: 2", "Grade: 3", "Grade: 4", "Grade: 5", "Grade: 6", "Time: 40 Minutes"]
toc: true
page-layout: full
---

## Overview

In this action-packed session, students will tackle two creative missions with Dash: **Basketball Challenge** and **Castle Siege**. Each task is designed with increasing difficulty by grade level, allowing students to build their programming logic as they play.

Using Blockly, students will control Dash to move, aim, and launch in order to complete each objective. Along the way, they'll explore fundamental computer science concepts like sequencing, debugging, conditionals, and loops—all wrapped inside a fun, interactive story.

---

## Duration

- **Estimated Time**: 40 minutes

---

## Materials

- Dash Robot (with Launcher add-on)  
- 3 soft balls per robot  
- Plastic cups, blocks, or small boxes  
- Tape or tiles for making paths  
- Tablets with Blockly app  
- Optional: cones, obstacles, or themed props for story immersion

---

## Challenge 1: Dash’s Basketball Mission 🏀

### Storyline

Dash dreams of being a pro basketball player. Today, he’s stepping up to take 3 shots at the hoop—but he needs your help to get the ball in every time.

### Setup

- Place a cup or small container at a reasonable distance.  
- Dash must move to a firing position and attempt to land all 3 balls in the target.  
- Depending on the grade, students can work with pre-made or self-designed paths.

### Grade-Level Breakdown

**Grades 1–2 (Getting Started)**  
- Use a guided path for Dash.  
- Focus on simple commands like forward, turn, and launch.  
- One shot at a time, 3 total.  
- 🔍 *Focus Skill*: Following instructions, cause-and-effect logic.

**Grades 3–4 (Growing Coders)**  
- Students design the path to the hoop.  
- Adjust launch strength to score.  
- Use blocks like `launch at __%`, `repeat`, and basic conditionals.  
- 🔍 *Focus Skill*: Adjusting variables, learning loops.

**Grades 5–6 (Code Pros)**  
- Students must build their own obstacle course and hit all 3 shots using a **single sequence** of blocks.  
- Encourage use of loops, variables, and conditions to optimize.  
- 🔍 *Focus Skill*: Efficiency, strategic thinking, and testing.

---

## Challenge 2: Dash’s Castle Siege 🏰

### Storyline

A princess is locked inside a castle made of blocks. Dash is on a quest to bring down the gates and rescue her with his launcher—but the walls are tougher than they look.

### Setup

- Create a “castle” out of stacked cups or blocks.  
- Dash will move into range and fire at lower blocks to topple the wall.  
- Add extra conditions or obstacles for upper levels.

### Grade-Level Breakdown

**Grades 1–2 (New Knights)**  
- Follow a path to the castle.  
- Aim and fire to knock down the wall.  
- 🔍 *Focus Skill*: Object interaction and movement basics.

**Grades 3–4 (Castle Crushers)**  
- Allow retries with loops.  
- Focus on hitting weak points in the wall.  
- Use repeat blocks and conditional retries.  
- 🔍 *Focus Skill*: Recognizing patterns, problem-solving.

**Grades 5–6 (Master Coders)**  
- Add rules: “If wall is still up, fire again.”  
- Include extra steps like navigating inside the castle after it falls.  
- Must use a complete block sequence with minimal trial edits.  
- 🔍 *Focus Skill*: Conditional logic, multi-step planning.

---

## Discussion & Reflection

After both challenges, gather the class for a quick debrief. You can ask:

- What changes made your shots or launches more accurate?
- Did your code work the first time? If not, how did you fix it?
- What strategy did you use for loops or conditionals?
- What part did you enjoy the most?

---

## Wrap-Up

These themed Dash activities blend creative storytelling with foundational programming skills. By adjusting challenge levels and allowing room for imagination, students stay engaged while learning how to think like a programmer: plan, test, adjust, and try again!

